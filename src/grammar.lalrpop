use std::str::FromStr;
use crate::ast::{Expr, UntypedExpr};

grammar;

pub UntypedExpr: UntypedExpr = {
    Integer,
    Float,
    Atom,
    String
}

Integer: UntypedExpr = {
    r"-?([0-9](_[0-9])?)+" => Expr::Int {
        value: i64::from_str(&<>.replace("_", "")[..]).unwrap()
    }
}

Float: UntypedExpr = {
    r"-?([0-9](_[0-9])?)+\.([0-9](_[0-9])?)+" => Expr::Float {
        value: f64::from_str(&<>.replace("_", "")[..]).unwrap()
    }
}

Atom: UntypedExpr = {
    RawAtom => Expr::Atom {
        value: <>
    }
}

String: UntypedExpr = {
    RawString => Expr::String {
        value: <>
    }
}

RawAtom: String = {
    StandardAtom,
    StringAtom,
    RawIdentifier,
}

StandardAtom: String = {
    ":" <RawIdentifier>,
}

StringAtom: String = {
    ":" <RawString>,
}

RawIdentifier: String = {
    r"[A-z][0-9A-z_]*" => <>.to_string(),
}

RawString: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}
