use std::str::FromStr;
use crate::ast::{Primative};

grammar;

pub Primative: Primative = {
    RawBoolean => Primative::Boolean(<>),
    RawInteger => Primative::Integer(<>),
    RawFloat => Primative::Float(<>),
    RawAtom => Primative::Atom(<>),
    RawString => Primative::String(<>),
}

RawBoolean: String = {
    "true" => String::from("true"),
    "false" => String::from("false"),
}

RawInteger: String = {
    r"-?([0-9](_[0-9])?)+" => <>.to_string()
}

RawFloat: String = {
    r"-?([0-9](_[0-9])?)+\.([0-9](_[0-9])?)+" => <>.to_string()
}

RawAtom: String = {
    StandardAtom,
    StringAtom,
    LiteralAtom,
}

StandardAtom: String = {
    ":" <RawIdentifier>,
}

StringAtom: String = {
    ":" <RawString>,
}

LiteralAtom: String = {
    <RawIdentifier>,
}

RawIdentifier: String = {
    r"[A-z][0-9A-z_]*" => <>.to_string(),
}

RawString: String = {
    <x:r#""(([^\\"]|\\.)*)""#> => x[1..(x.len() - 1)].to_string(),
}
